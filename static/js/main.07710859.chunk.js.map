{"version":3,"sources":["service/components/launchesComponent.js","App.js","reportWebVitals.js","index.js"],"names":["GET_LAUNCHES","gql","LaunchesListView","useQuery","fetchPolicy","data","error","loading","element","launches","map","index","launch_date_utc","launch_success","rocket","links","details","date","moment","format","rocket_name","url","video_link","httpLink","HttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ijBAQA,IAAMA,EAAeC,IAAH,KAgDHC,EAlCU,WAAO,IAAD,EAIZC,mBAAUH,EAAc,CACnCI,YAAa,iBAHbC,EAFuB,EAEvBA,KACAC,EAHuB,EAGvBA,MAMJ,GAT2B,EAIvBC,QAKS,OAAO,2CACpB,GAAID,EAAO,OAAO,yCAElB,IAAME,EAAUH,EAAKI,SAASC,KAAI,WAA4DC,GAAW,IAArEC,EAAoE,EAApEA,gBAAiBC,EAAmD,EAAnDA,eAAgBC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,QAC1EC,EAAOC,IAAON,GAAiBO,OAAO,QAC5C,OAAQ,gCACJ,gDAAmBF,EAAnB,IAA0BJ,EAAiB,eAAiB,SAA5D,aAAgFC,EAAOM,eACvF,cAAC,IAAD,CAEIC,IAAKN,EAAMO,YADNX,GAGT,4BAAIK,GAAoB,iCANVL,MAatB,OACI,mCACKH,KC5CPe,EAAW,IAAIC,IAAS,CAAEC,IAAK,qCAE/BC,EAAS,IAAIC,IAAa,CAC9BC,KAAML,EACNM,MAAO,IAAIC,MAaEC,MAVf,WACE,OACI,cAAC,iBAAD,CAAgBL,OAAQA,EAAxB,SACE,8BACE,cAAC,EAAD,SCNKM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.07710859.chunk.js","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport {Table} from 'antd';\nimport ReactPlayer from \"react-player\";\nimport {gql} from 'apollo-boost'\nimport moment from \"moment\";\n\n\nconst GET_LAUNCHES = gql`{\n    launches(limit: 5) {\n        launch_date_utc\n        launch_success\n        rocket {\n            rocket_name\n        }\n        links {\n            video_link\n        }\n        details\n    }\n}`;\n\nconst LaunchesListView = () => {\n    const {\n        data,\n        error,\n        loading} = useQuery( GET_LAUNCHES, {\n        fetchPolicy: 'network-only'\n    });\n\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    const element = data.launches.map(({launch_date_utc, launch_success, rocket, links, details}, index) => {\n        const date = moment(launch_date_utc).format('LLLL')\n        return (<div key={index}>\n            <h2>The launch of {date} {launch_success ? \"is a success\" : \"failed\"} inside a {rocket.rocket_name}</h2>\n            <ReactPlayer\n                key={index}\n                url={links.video_link}\n            />\n            <p>{details ? details : \"No d√©tails for this one\"}</p>\n        </div>)\n    })\n\n\n\n\n    return (\n        <>\n            {element}\n        </>\n    )\n};\n\nexport default LaunchesListView;\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport LaunchesListView from \"./service/components/launchesComponent\";\n\nconst httpLink = new HttpLink({ uri: 'https://api.spacex.land/graphql/' });\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n      <ApolloProvider client={client}>\n        <div>\n          <LaunchesListView />\n        </div>\n      </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}